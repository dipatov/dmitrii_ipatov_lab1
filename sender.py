import socket
import numpy as np

s = '''Когда я приступила к изучению Data Science (сейчас автор статьи CAN | Geoscience BSc undergrad student | Software Dev graduate), — прим. перев.), я читала практически каждую статью по этой теме, которая попадала в мои руки. В большинстве случаев это были вдохновляющие статьи других людей, которые смогли обучиться профессии дата-сайентиста самостоятельно.

В этих статьях было полным-полно информации о счастливчиках, которые, не имея IT-образования, преодолели все преграды и проблемы и стали дата-сайентистами в течение нескольких месяцев. Само собой, большинство авторов таких статей затем устраивались в крупные компании класса FAANG.

Статей подобного рода в интернете много. «Как я стал дата-сайентистом за 6 месяцев», «Как я стал дата-сайентистом и устроился в Google» — в них описываются подробности успеха.

Но как человеку с образованием в сфере разработки программного обеспечения и университетским уровнем знания математики мне хорошо заметны очевидные проблемы таких статей. А ведь такие статьи пытаются вдохновить людей без образования, убедив их в том, что стать дата-сайентистом можно менее чем за год, без предварительного опыта работы или полученных ранее знаний.

Возможности — это все

Никто не говорит, что статьи, о которых идет речь, неправдивы. Нет, вполне возможно, что во многих из них действительно правдивые истории. Но то, что обходится стороной в таких историях, — это возможности, доступные немногим, которые действительно помогают быстро получить необходимый опыт и знания.

Например, возможность учиться по 8 часов в день, что может позволить себе далеко не каждый, возможность платного участия в буткемпах и MOOC, проживание в каком-нибудь tech hub. Все это позволяет ускорить процесс обучения.

Никто не говорит, что люди с подобными преимуществами не работали, не старались. Конечно, нет, они много месяцев долго и упорно трудились, не будем приуменьшать их заслуги. Но проблема в том, что статьи об успешных новичках в индустрии обычно не раскрывают эти подробности, а ведь рассчитаны подобные материалы на самую широкую целевую аудиторию. У 90% из читающих нет возможности ни учиться целыми днями, ни платить за буткемпы.

Поэтому, читая эти статьи, стоит понимать, что поданный в них материал — лишь вершина айсберга. Все остальное читатель не видит.

В общем, если у вас не получается за полгода стать дата-сайентистом, не ругайте себя, сравнивая с теми, у кого получилось.

Эффект выжившего или «то, что сработало для кого-то, не означает, что оно сработает для всех»

Авторы некоторых статей о Data Science предлагают идеальный, по их мнению, план, который позволит любому читателю стать профессионалом в этой сфере за короткий период времени.

Но как бы понятно, что если это сработало для автора, то этот же план может оказаться неподходящим для другого человека. Все это — хорошо известный «эффект выжившего», только в отношении обучения.

'''

message = ''
for i in s.encode('utf-8'):
    message +=  np.binary_repr(i, width=8)

n = 55

while len(message) % n != 0:
    message += '0'

def change_letter(word, let, i):
    return word[:i] + let + word[i + 1:]

def encode_word(word):
    k = 0
    while 2**k <= len(word):
        word = word[:2**k-1] + '0' + word[2**k-1:]
        k += 1
    k = 0
    while 2**k <= len(word):
        ones = 0
        for j in range(2**k-1, len(word), 2**(k+1)):
            for x in range(j, min(j+(2**k), len(word))):
                if word[x] == '1':
                    ones += 1
        if ones % 2 == 1:
            word = change_letter(word, "1", 2**k-1)
        k += 1
    return word

server = '192.168.8.112', 6121
sor = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
sor.bind(('192.168.8.112', 12451))
sor.sendto(b'', server)

received_message = ''
for i in range(0, len(message) // n):
    word = message[i * n:(i + 1) * n]
    crt_word = encode_word(word)
    sor.sendto(crt_word.encode(), server)

while 1:
    data = sor.recv(1024)
    print(data.decode('utf-8'))
    break

sor.close()
